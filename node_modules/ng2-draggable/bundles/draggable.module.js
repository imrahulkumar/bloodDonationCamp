System.registerDynamic('draggable.directive', ['@angular/core'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var DraggableDirective = function () {
        function DraggableDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.Δx = 0;
            this.Δy = 0;
            this.canDrag = true;
            this.mustBePosition = ['absolute', 'fixed', 'relative'];
        }
        Object.defineProperty(DraggableDirective.prototype, "draggable", {
            set: function (val) {
                if (val === undefined || val === null || val === '') return;
                this.canDrag = !!val;
            },
            enumerable: true,
            configurable: true
        });
        DraggableDirective.prototype.ngOnInit = function () {
            this.renderer.setElementAttribute(this.el.nativeElement, 'draggable', 'true');
        };
        DraggableDirective.prototype.ngAfterViewInit = function () {
            try {
                var position = window.getComputedStyle(this.el.nativeElement).position;
                if (this.mustBePosition.indexOf(position) === -1) {
                    console.warn(this.el.nativeElement, 'Must be having position attribute set to ' + this.mustBePosition.join('|'));
                }
            } catch (ex) {
                console.error(ex);
            }
        };
        DraggableDirective.prototype.ngOnDestroy = function () {
            this.renderer.setElementAttribute(this.el.nativeElement, 'draggable', 'false');
        };
        DraggableDirective.prototype.onDragStart = function (event) {
            this.Δx = event.x - this.el.nativeElement.offsetLeft;
            this.Δy = event.y - this.el.nativeElement.offsetTop;
        };
        DraggableDirective.prototype.onDrag = function (event) {
            this.doTranslation(event.x, event.y);
        };
        DraggableDirective.prototype.onDragEnd = function (event) {
            this.Δx = 0;
            this.Δy = 0;
        };
        DraggableDirective.prototype.doTranslation = function (x, y) {
            if (!x || !y) return;
            this.renderer.setElementStyle(this.el.nativeElement, 'top', y - this.Δy + 'px');
            this.renderer.setElementStyle(this.el.nativeElement, 'left', x - this.Δx + 'px');
        };
        DraggableDirective.decorators = [{ type: core_1.Directive, args: [{
                selector: '[draggable]',
                host: {
                    '(dragstart)': 'onDragStart($event)',
                    '(dragend)': 'onDragEnd($event)',
                    '(drag)': 'onDrag($event)'
                }
            }] }];
        DraggableDirective.ctorParameters = function () {
            return [{ type: core_1.ElementRef }, { type: core_1.Renderer }];
        };
        DraggableDirective.propDecorators = {
            'draggable': [{ type: core_1.Input, args: ['draggable'] }]
        };
        return DraggableDirective;
    }();
    exports.DraggableDirective = DraggableDirective;
});
System.registerDynamic('draggable.module', ['@angular/core', './draggable.directive'], true, function ($__require, exports, module) {
    "use strict";

    var global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var draggable_directive_1 = $__require('./draggable.directive');
    var Ng2DraggableModule = function () {
        function Ng2DraggableModule() {}
        Ng2DraggableModule.decorators = [{ type: core_1.NgModule, args: [{
                imports: [],
                declarations: [draggable_directive_1.DraggableDirective],
                exports: [draggable_directive_1.DraggableDirective],
                providers: []
            }] }];
        Ng2DraggableModule.ctorParameters = function () {
            return [];
        };
        return Ng2DraggableModule;
    }();
    exports.Ng2DraggableModule = Ng2DraggableModule;
});