"use strict";
var core_1 = require('@angular/core');
var DraggableDirective = (function () {
    function DraggableDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.Δx = 0;
        this.Δy = 0;
        this.canDrag = true;
        this.mustBePosition = ['absolute', 'fixed', 'relative'];
    }
    Object.defineProperty(DraggableDirective.prototype, "draggable", {
        set: function (val) {
            if (val === undefined || val === null || val === '')
                return;
            this.canDrag = !!val;
        },
        enumerable: true,
        configurable: true
    });
    DraggableDirective.prototype.ngOnInit = function () {
        this.renderer.setElementAttribute(this.el.nativeElement, 'draggable', 'true');
    };
    DraggableDirective.prototype.ngAfterViewInit = function () {
        try {
            var position = window.getComputedStyle(this.el.nativeElement).position;
            if (this.mustBePosition.indexOf(position) === -1) {
                console.warn(this.el.nativeElement, 'Must be having position attribute set to ' + this.mustBePosition.join('|'));
            }
        }
        catch (ex) {
            console.error(ex);
        }
    };
    DraggableDirective.prototype.ngOnDestroy = function () {
        this.renderer.setElementAttribute(this.el.nativeElement, 'draggable', 'false');
    };
    DraggableDirective.prototype.onDragStart = function (event) {
        this.Δx = event.x - this.el.nativeElement.offsetLeft;
        this.Δy = event.y - this.el.nativeElement.offsetTop;
    };
    DraggableDirective.prototype.onDrag = function (event) {
        this.doTranslation(event.x, event.y);
    };
    DraggableDirective.prototype.onDragEnd = function (event) {
        this.Δx = 0;
        this.Δy = 0;
    };
    DraggableDirective.prototype.doTranslation = function (x, y) {
        if (!x || !y)
            return;
        this.renderer.setElementStyle(this.el.nativeElement, 'top', (y - this.Δy) + 'px');
        this.renderer.setElementStyle(this.el.nativeElement, 'left', (x - this.Δx) + 'px');
    };
    DraggableDirective.decorators = [
        { type: core_1.Directive, args: [{
                    selector: '[draggable]',
                    host: {
                        '(dragstart)': 'onDragStart($event)',
                        '(dragend)': 'onDragEnd($event)',
                        '(drag)': 'onDrag($event)'
                    }
                },] },
    ];
    DraggableDirective.ctorParameters = function () { return [
        { type: core_1.ElementRef, },
        { type: core_1.Renderer, },
    ]; };
    DraggableDirective.propDecorators = {
        'draggable': [{ type: core_1.Input, args: ['draggable',] },],
    };
    return DraggableDirective;
}());
exports.DraggableDirective = DraggableDirective;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZ2dhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kcmFnZ2FibGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxxQkFBeUYsZUFBZSxDQUFDLENBQUE7QUFJekc7SUFZRSw0QkFDVSxFQUFjLEVBQVUsUUFBa0I7UUFBMUMsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFaNUMsT0FBRSxHQUFXLENBQUMsQ0FBQztRQUNmLE9BQUUsR0FBVyxDQUFDLENBQUM7UUFFZixZQUFPLEdBQVcsSUFBSSxDQUFDO1FBT3ZCLG1CQUFjLEdBQWtCLENBQUMsVUFBVSxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztJQUsxRSxDQUFDO0lBVEQsc0JBQUkseUNBQVM7YUFBYixVQUFjLEdBQU87WUFDbkIsRUFBRSxDQUFBLENBQUMsR0FBRyxLQUFLLFNBQVMsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxFQUFHLENBQUM7Z0JBQUMsTUFBTSxDQUFDO1lBQzVELElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQVFELHFDQUFRLEdBQVI7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBQ0QsNENBQWUsR0FBZjtRQUNFLElBQUksQ0FBQztZQUNILElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsQ0FBQztZQUN2RSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pELE9BQU8sQ0FBQyxJQUFJLENBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsMkNBQTJDLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNwSCxDQUFDO1FBQ0gsQ0FBRTtRQUFBLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUM7SUFDSCxDQUFDO0lBQ0Qsd0NBQVcsR0FBWDtRQUNFLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7SUFFRCx3Q0FBVyxHQUFYLFVBQVksS0FBaUI7UUFDM0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQztRQUNyRCxJQUFJLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO0lBQ3RELENBQUM7SUFFRCxtQ0FBTSxHQUFOLFVBQU8sS0FBaUI7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsc0NBQVMsR0FBVCxVQUFVLEtBQWlCO1FBQ3pCLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDZCxDQUFDO0lBRUQsMENBQWEsR0FBYixVQUFjLENBQVMsRUFBRSxDQUFTO1FBQ2hDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDbEYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNyRixDQUFDO0lBR0ksNkJBQVUsR0FBMEI7UUFDM0MsRUFBRSxJQUFJLEVBQUUsZ0JBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQztvQkFDeEIsUUFBUSxFQUFFLGFBQWE7b0JBQ3ZCLElBQUksRUFBRTt3QkFDSixhQUFhLEVBQUUscUJBQXFCO3dCQUNwQyxXQUFXLEVBQUUsbUJBQW1CO3dCQUNoQyxRQUFRLEVBQUUsZ0JBQWdCO3FCQUMzQjtpQkFDRixFQUFHLEVBQUU7S0FDTCxDQUFDO0lBRUssaUNBQWMsR0FBbUUsY0FBTSxPQUFBO1FBQzlGLEVBQUMsSUFBSSxFQUFFLGlCQUFVLEdBQUc7UUFDcEIsRUFBQyxJQUFJLEVBQUUsZUFBUSxHQUFHO0tBQ2pCLEVBSDZGLENBRzdGLENBQUM7SUFDSyxpQ0FBYyxHQUEyQztRQUNoRSxXQUFXLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFHLEVBQUUsRUFBRTtLQUNyRCxDQUFDO0lBQ0YseUJBQUM7QUFBRCxDQUFDLEFBMUVELElBMEVDO0FBMUVZLDBCQUFrQixxQkEwRTlCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuXG5cbmV4cG9ydCBjbGFzcyBEcmFnZ2FibGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XG4gIHByaXZhdGUgzpR4OiBudW1iZXIgPSAwO1xuICBwcml2YXRlIM6UeTogbnVtYmVyID0gMDtcbiAgXG4gIHByaXZhdGUgY2FuRHJhZzpib29sZWFuID0gdHJ1ZTtcbiAgXG4gIFxuICBzZXQgZHJhZ2dhYmxlKHZhbDphbnkpe1xuICAgIGlmKHZhbCA9PT0gdW5kZWZpbmVkIHx8IHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09ICcnICkgcmV0dXJuO1xuICAgIHRoaXMuY2FuRHJhZyA9ICEhdmFsO1xuICB9XG4gIHByaXZhdGUgbXVzdEJlUG9zaXRpb246IEFycmF5PHN0cmluZz4gPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJywgJ3JlbGF0aXZlJ107XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyXG4gICkge1xuICAgIFxuICB9XG4gIFxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEVsZW1lbnRBdHRyaWJ1dGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZHJhZ2dhYmxlJywgJ3RydWUnKTtcbiAgfVxuICBuZ0FmdGVyVmlld0luaXQoKXtcbiAgICB0cnkge1xuICAgICAgbGV0IHBvc2l0aW9uID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpcy5lbC5uYXRpdmVFbGVtZW50KS5wb3NpdGlvbjtcbiAgICAgIGlmICh0aGlzLm11c3RCZVBvc2l0aW9uLmluZGV4T2YocG9zaXRpb24pID09PSAtMSkge1xuICAgICAgICBjb25zb2xlLndhcm4oIHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ011c3QgYmUgaGF2aW5nIHBvc2l0aW9uIGF0dHJpYnV0ZSBzZXQgdG8gJyArIHRoaXMubXVzdEJlUG9zaXRpb24uam9pbignfCcpKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChleCkge1xuICAgICAgY29uc29sZS5lcnJvcihleCk7XG4gICAgfVxuICB9XG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudEF0dHJpYnV0ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdkcmFnZ2FibGUnLCAnZmFsc2UnKTtcbiAgfVxuICBcbiAgb25EcmFnU3RhcnQoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcbiAgICB0aGlzLs6UeCA9IGV2ZW50LnggLSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICB0aGlzLs6UeSA9IGV2ZW50LnkgLSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQub2Zmc2V0VG9wO1xuICB9XG5cbiAgb25EcmFnKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy5kb1RyYW5zbGF0aW9uKGV2ZW50LngsIGV2ZW50LnkpO1xuICB9XG5cbiAgb25EcmFnRW5kKGV2ZW50OiBNb3VzZUV2ZW50KSB7XG4gICAgdGhpcy7OlHggPSAwO1xuICAgIHRoaXMuzpR5ID0gMDtcbiAgfVxuXG4gIGRvVHJhbnNsYXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICBpZiAoIXggfHwgIXkpIHJldHVybjtcbiAgICB0aGlzLnJlbmRlcmVyLnNldEVsZW1lbnRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd0b3AnLCAoeSAtIHRoaXMuzpR5KSArICdweCcpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2xlZnQnLCAoeCAtIHRoaXMuzpR4KSArICdweCcpO1xuICB9XG4gIFxuXG5zdGF0aWMgZGVjb3JhdG9yczogRGVjb3JhdG9ySW52b2NhdGlvbltdID0gW1xueyB0eXBlOiBEaXJlY3RpdmUsIGFyZ3M6IFt7XG4gIHNlbGVjdG9yOiAnW2RyYWdnYWJsZV0nLFxuICBob3N0OiB7XG4gICAgJyhkcmFnc3RhcnQpJzogJ29uRHJhZ1N0YXJ0KCRldmVudCknLFxuICAgICcoZHJhZ2VuZCknOiAnb25EcmFnRW5kKCRldmVudCknLFxuICAgICcoZHJhZyknOiAnb25EcmFnKCRldmVudCknXG4gIH1cbn0sIF0gfSxcbl07XG4vKiogQG5vY29sbGFwc2UgKi9cbnN0YXRpYyBjdG9yUGFyYW1ldGVyczogKCkgPT4gKHt0eXBlOiBhbnksIGRlY29yYXRvcnM/OiBEZWNvcmF0b3JJbnZvY2F0aW9uW119fG51bGwpW10gPSAoKSA9PiBbXG57dHlwZTogRWxlbWVudFJlZiwgfSxcbnt0eXBlOiBSZW5kZXJlciwgfSxcbl07XG5zdGF0aWMgcHJvcERlY29yYXRvcnM6IHtba2V5OiBzdHJpbmddOiBEZWNvcmF0b3JJbnZvY2F0aW9uW119ID0ge1xuJ2RyYWdnYWJsZSc6IFt7IHR5cGU6IElucHV0LCBhcmdzOiBbJ2RyYWdnYWJsZScsIF0gfSxdLFxufTtcbn1cbmludGVyZmFjZSBEZWNvcmF0b3JJbnZvY2F0aW9uIHtcbiAgdHlwZTogRnVuY3Rpb247XG4gIGFyZ3M/OiBhbnlbXTtcbn1cbiJdfQ==